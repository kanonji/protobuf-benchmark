// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/benchmark.proto

package protoconnect

import (
	proto "benchmark/gen/proto"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BenchmarkServiceName is the fully-qualified name of the BenchmarkService service.
	BenchmarkServiceName = "proto.BenchmarkService"
)

// BenchmarkServiceClient is a client for the proto.BenchmarkService service.
type BenchmarkServiceClient interface {
	Foo(context.Context, *connect_go.Request[proto.FooRequest]) (*connect_go.Response[proto.FooResponse], error)
}

// NewBenchmarkServiceClient constructs a client for the proto.BenchmarkService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBenchmarkServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BenchmarkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &benchmarkServiceClient{
		foo: connect_go.NewClient[proto.FooRequest, proto.FooResponse](
			httpClient,
			baseURL+"/proto.BenchmarkService/Foo",
			opts...,
		),
	}
}

// benchmarkServiceClient implements BenchmarkServiceClient.
type benchmarkServiceClient struct {
	foo *connect_go.Client[proto.FooRequest, proto.FooResponse]
}

// Foo calls proto.BenchmarkService.Foo.
func (c *benchmarkServiceClient) Foo(ctx context.Context, req *connect_go.Request[proto.FooRequest]) (*connect_go.Response[proto.FooResponse], error) {
	return c.foo.CallUnary(ctx, req)
}

// BenchmarkServiceHandler is an implementation of the proto.BenchmarkService service.
type BenchmarkServiceHandler interface {
	Foo(context.Context, *connect_go.Request[proto.FooRequest]) (*connect_go.Response[proto.FooResponse], error)
}

// NewBenchmarkServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBenchmarkServiceHandler(svc BenchmarkServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/proto.BenchmarkService/Foo", connect_go.NewUnaryHandler(
		"/proto.BenchmarkService/Foo",
		svc.Foo,
		opts...,
	))
	return "/proto.BenchmarkService/", mux
}

// UnimplementedBenchmarkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBenchmarkServiceHandler struct{}

func (UnimplementedBenchmarkServiceHandler) Foo(context.Context, *connect_go.Request[proto.FooRequest]) (*connect_go.Response[proto.FooResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.BenchmarkService.Foo is not implemented"))
}
